class UndirectedGraph:

    # n is the number of vertices
    # we will label the vertices from 0 to self.n -1 
    # We simply store the edges in a list.
    def __init__(self, n):
        assert n >= 1, 'You are creating an empty graph -- disallowed'
        self.n = n
        self.edges = []
        self.vertex_data = [None]*self.n
       
        
    def set_vertex_data(self, j, dat):
        assert 0 <= j < self.n
        self.vertex_data[j] = dat
        
    def get_vertex_data(self, j):
        assert 0 <= j < self.n
        return self.vertex_data[j] 
        
    def add_edge(self, i, j, wij):
        assert 0 <= i < self.n
        assert 0 <= j < self.n
        assert i != j
        # Make sure to add edge from i to j with weight wij
        self.edges.append((i, j, wij))
        
    def sort_edges(self):
        # sort edges in ascending order of weights.
        self.edges = sorted(self.edges, key=lambda edg_data: edg_data[2])


class DisjointForests:
    def __init__(self, n):
        assert n >= 1, 'Empty disjoint forest is disallowed'
        self.n = n
        self.parents = [None] * n
        self.rank = [None] * n

    def dictionary_of_sets(self):
        d = {}
        for i in range(self.n):
            if self.is_representative(i):
                d[i] = set([i])
        for j in range(self.n):
            if self.parents[j] is not None:
                root = self.find(j)
                assert root in d
                d[root].add(j)
        return d

    def make_set(self, j):
        assert 0 <= j < self.n
        assert self.parents[j] is None, 'You are calling make_set on an element multiple times -- not allowed.'
        self.parents[j] = j
        self.rank[j] = 1

    def is_representative(self, j):
        return self.parents[j] == j

    def get_rank(self, j):
        return self.rank[j]

    def find(self, j):
        if self.parents[j] != j:
            self.parents[j] = self.find(self.parents[j])
        return self.parents[j]

    def union(self, j1, j2):
        root1 = self.find(j1)
        root2 = self.find(j2)

        if root1 != root2:
            if self.rank[root1] > self.rank[root2]:
                self.parents[root2] = root1
            elif self.rank[root1] < self.rank[root2]:
                self.parents[root1] = root2
            else:
                self.parents[root2] = root1
                self.rank[root1] += 1


def compute_scc(g, W):
    d = DisjointForests(g.n)

    for i in range(g.n):
        d.make_set(i)

    for (i, j, wij) in g.edges:
        if wij <= W:
            d.union(i, j)

    return d.dictionary_of_sets()


def compute_mst(g):
    d = DisjointForests(g.n)
    mst_edges = []
    mst_weight = 0

    for i in range(g.n):
        d.make_set(i)

    g.sort_edges()

    for (i, j, wij) in g.edges:
        if d.find(i) != d.find(j):
            d.union(i, j)
            mst_edges.append((i, j, wij))
            mst_weight += wij

    return mst_edges, mst_weight
