class DisjointForests:
    def __init__(self, n):
        assert n >= 1, ' Empty disjoint forest is disallowed'
        self.n = n
        self.parents = [None] * n
        self.rank = [None] * n

    def dictionary_of_sets(self):
        d = {}
        for i in range(self.n):
            if self.is_representative(i):
                d[i] = set([i])
        for j in range(self.n):
            if self.parents[j] is not None:
                root = self.find(j)
                assert root in d
                d[root].add(j)
        return d

    def make_set(self, j):
        assert 0 <= j < self.n
        assert self.parents[j] is None, 'You are calling make_set on an element multiple times -- not allowed.'
        self.parents[j] = j
        self.rank[j] = 1

    def is_representative(self, j):
        return self.parents[j] == j

    def get_rank(self, j):
        return self.rank[j]

    def find(self, j):
        assert 0 <= j < self.n
        assert self.parents[j] is not None, 'You are calling find on an element that is not part of the family yet. Please call make_set first.'

        if self.parents[j] != j:
            self.parents[j] = self.find(self.parents[j])  # Path compression
        return self.parents[j]

    def union(self, j1, j2):
        root1 = self.find(j1)
        root2 = self.find(j2)

        if root1 != root2:
            if self.rank[root1] > self.rank[root2]:
                self.parents[root2] = root1
            elif self.rank[root1] < self.rank[root2]:
                self.parents[root1] = root2
            else:  # If ranks are the same
                self.parents[root2] = root1
                self.rank[root1] += 1


# Test Cases


d = DisjointForests(10)
for i in range(10):
    d.make_set(i)

for i in range(10):
    assert d.find(i) == i, f'Failed: Find on {i} must return {i} back'

d.union(0, 1)
d.union(2, 3)
assert d.find(0) == d.find(1), '0 and 1 have been union-ed together'
assert d.find(2) == d.find(3), '2 and 3 have been union-ed together'
assert d.find(0) != d.find(3), '0 and 3 should be in different trees'

assert ((d.get_rank(0) == 2 and d.get_rank(1) == 1) or 
        (d.get_rank(1) == 2 and d.get_rank(0) == 1)), 'One of the nodes 0 or 1 must have rank 2'

assert ((d.get_rank(2) == 2 and d.get_rank(3) == 1) or 
        (d.get_rank(3) == 2 and d.get_rank(2) == 1)), 'One of the nodes 2 or 3 must have rank 2'


d.union(3, 4)
assert d.find(2) == d.find(4), '2 and 4 must be in the same set in the family.'

d.union(5, 7)
d.union(6, 8)
d.union(3, 7)
d.union(0, 6)

assert d.find(6) == d.find(1), '1 and 6 must be in the same set in the family'
assert d.find(7) == d.find(4), '7 and 4 must be in the same set in the family'

print('All tests passed: 10 points.')
