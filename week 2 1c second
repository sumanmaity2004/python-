class DFSTimeCounter:
    def __init__(self):
        self.count = 0

    def reset(self):
        self.count = 0
    
    def increment(self):
        self.count += 1
        
    def get(self):
        return self.count 
    
class UndirectedGraph:
    def __init__(self, n):
        if n < 1:
            raise ValueError('Graph must have at least one vertex')
        self.n = n
        self.adj_list = [set() for _ in range(self.n)]
       
    def add_edge(self, i, j):
        if not (0 <= i < self.n and 0 <= j < self.n):
            raise IndexError('Vertex index out of bounds')
        if i == j:
            raise ValueError('Self-loops are not allowed')
        self.adj_list[i].add(j)
        self.adj_list[j].add(i)
    
    def get_neighboring_vertices(self, i):
        if not (0 <= i < self.n):
            raise IndexError('Vertex index out of bounds')
        return self.adj_list[i]
    
    def dfs_visit(self, i, dfs_timer, discovery_times, finish_times, dfs_tree_parent, dfs_back_edges):
        if not (0 <= i < self.n):
            raise IndexError('Vertex index out of bounds')
        if discovery_times[i] is not None:
            raise ValueError('Vertex already discovered')
        if finish_times[i] is not None:
            raise ValueError('Vertex already finished')
        
        discovery_times[i] = dfs_timer.get()
        dfs_timer.increment()
        
        for neighbor in self.get_neighboring_vertices(i):
            if discovery_times[neighbor] is None:
                dfs_tree_parent[neighbor] = i
                self.dfs_visit(neighbor, dfs_timer, discovery_times, finish_times, dfs_tree_parent, dfs_back_edges)
            elif finish_times[neighbor] is None:
                dfs_back_edges.append((i, neighbor))
        
        finish_times[i] = dfs_timer.get()
        dfs_timer.increment()
    
    def dfs_traverse_graph(self):
        dfs_timer = DFSTimeCounter()
        discovery_times = [None] * self.n
        finish_times = [None] * self.n
        dfs_tree_parents = [None] * self.n
        dfs_back_edges = []
        
        connected_components = 0
        
        for i in range(self.n):
            if discovery_times[i] is None:
                connected_components += 1
                self.dfs_visit(i, dfs_timer, discovery_times, finish_times, dfs_tree_parents, dfs_back_edges)
        
        non_trivial_back_edges = [(i, j) for (i, j) in dfs_back_edges if dfs_tree_parents[i] != j]
        return connected_components, dfs_tree_parents, non_trivial_back_edges, discovery_times, finish_times
    
def num_connected_components(g):
    return g.dfs_traverse_graph()[0]

def find_all_nodes_in_cycle(g):
    _, dfs_tree_parents, back_edges, _, _ = g.dfs_traverse_graph()
    nodes_in_cycle = set()
    
    for (u, v) in back_edges:
        # To find all nodes in the cycle, we need to trace back from u to v
        cycle_nodes = set()
        while u is not None and u != v:
            cycle_nodes.add(u)
            u = dfs_tree_parents[u]
        cycle_nodes.add(v)
        nodes_in_cycle.update(cycle_nodes)
    
    return nodes_in_cycle
